package bgm.soundmanager{	import flash.net.*;	import flash.events.*;	import flash.media.*;	import flash.utils.getDefinitionByName;		/**************************************************************	 *	 * 【　SoundManager　】ver.0.85	 * Soundを一元管理するクラス	 *	 *	 * -----------------------------------------------------------	 * [ 更新履歴 ]	 * 12.07.02		addBGM(), addSE()にSoundClassを指定しても登録できるようにしました	 * 11.07.04		「setVolueBGM()」を「setVolumeBGM()」に直しました。失礼しました。	 * 11.04.25		各ソースからTweenerを切り離してTweenEngine.asに隔離した	 *	 * -----------------------------------------------------------	 * [ コンセプト ]	 * ※Soundクラスすら意識させずに音を簡単制御したい	 * ※BGMとSEに分けて登録してmute/unMuteはそれぞれBGM/SEごとに管理する	 *	 * -----------------------------------------------------------	 * [ 使い方・コツ ]	 * ※BGMの特性は「loop有り、重ね再生不可」です	 * ※SEの特性は「loop無し、重ね再生可」です	 * ※soundの制御は基本的にplay(),stop()ではなく音量の操作で行う。	 * ※setVolume()とtoggleMute()だけでなんとかなるだろ。	 * ※removeBGM()、removeSE()する場合はstopBGM()、stopSE()して後で。	 *	 * -----------------------------------------------------------	 * [ 製作メモ ]	 * ※stop()のフェードアウトと、pause()、togglePause()の実装はしません。	 * 　loopをまたいだり、フェード中にメソッド連打したりすると、	 * 　tempVolumeが更新されまくったりして音量制御がめんどくさいことになるので諦めました。	 * ※loopする度、play()する度にchannelが別物に変化するので参照元を失うと音量を制御できないことがある	 * ※soundChannelの取得は直参照じゃないとエラーになることがある	 * ※そういう意味でTweenerの上書き音量制御は優秀	 *	 * -----------------------------------------------------------	 * [ タスクリスト ]	 * ※コードヒントの使い方記述（検討）	 * ※Tweenerを使わないように書き直す（検討）	 * ※soundspectaclesを操りたい	 *	 *************************************************************/	public class SoundManager	{				private static var _volumeBGM:Number = 1.0;		private static var _volumeSE:Number = 1.0;		private static var _panBGM:Number = 0.0;		private static var _panSE:Number = 0.0;		private static var _isMuteBGM:Boolean = false;		private static var _isMuteSE:Boolean = false;		private static var _bgmList:Array = [];		private static var _seList:Array = [];				//=============================================================		//　■コンストラクタ / 初期化		//=============================================================		public function SoundManager()		{			throw new Error("[Alert] SoundManager クラスは static なのでインスタンスは作れません。");		}				public static function init(volumeBGM:Number = 1.0, volumeSE:Number = 1.0):void		{			TweenEngine.init();			_volumeBGM = volumeBGM;			_volumeSE = volumeSE;		}				//=============================================================		// ■getter / settter　		//=============================================================				//---------------------------------------------------------------------------		// マスターvolume・pan		//---------------------------------------------------------------------------		public static function get volumeBGM():Number		{			return _volumeBGM;		}				public static function get volumeSE():Number		{			return _volumeSE;		}				public static function set volumeBGM(volume:Number):void		{			_volumeBGM = volume;			setVolumeBGM(volume);		}				public static function set volumeSE(volume:Number):void		{			_volumeSE = volume;			setVolumeSE(volume);		}				public static function get panBGM():Number		{			return _panBGM;		}				public static function get panSE():Number		{			return _panSE;		}				public static function set panBGM(pan:Number):void		{			_panBGM = pan;			setPanBGM(pan);		}				public static function set panSE(pan:Number):void		{			_panSE = pan;			setPanSE(pan);		}				//---------------------------------------------------------------------------		// BGM/SEボタンのON/OFF状態を取得		//---------------------------------------------------------------------------		public static function get isMuteBGM():Boolean		{			return _isMuteBGM;		}				public static function get isMuteSE():Boolean		{			return _isMuteSE;		}				//---------------------------------------------------------------------------		// BGM一覧を配列で返す		//---------------------------------------------------------------------------		public static function get bgmList():Array		{			var array:Array = [];			for (var key:String in _bgmList)			{				var s:BgmSound = _bgmList[key];				if (s.isAvailable)					array.push(s.soundId);			}			return array;		}				//---------------------------------------------------------------------------		// SE一覧を配列で返す		//---------------------------------------------------------------------------		public static function get seList():Array		{			var array:Array = [];			for (var key:String in _seList)			{				var s:SeSound = _seList[key];				if (s)					array.push(s.soundId);			}			return array;		}				//=============================================================		//　■登録/抹消		//=============================================================				//--------------------------------------------------------------------------		//　SoundClassか、もしくはライブラリのlinkageNamaを指定してBGMとして登録する		//--------------------------------------------------------------------------		public static function addBGM(soundId:String, soundClass_or_linkageName:*, loop:Boolean = true):void		{						// 多重登録を防ぐ			if (_checkConflict_judge(soundId)) {				return;			}						var sound:Sound;						// 定義			if (soundClass_or_linkageName is Sound)			{				sound = soundClass_or_linkageName;			}			else if (soundClass_or_linkageName is String)			{				var linkageName:String = soundClass_or_linkageName;				var soundClassRef:Class = Class(getDefinitionByName(linkageName));				sound = new soundClassRef();			}			var bgm:BgmSound = new BgmSound(sound, soundId, _isMuteBGM, loop);						// 登録			_bgmList[soundId] = bgm;		}				//--------------------------------------------------------------------------		//　ライブラリのsoundをSEとして登録する		//--------------------------------------------------------------------------		public static function addSE(soundId:String, soundClass_or_linkageName:*):void		{						// 多重登録を防ぐ			if (_checkConflict_judge(soundId)) {				return;			}						var sound:Sound;						// 定義			if (soundClass_or_linkageName is Sound)			{				sound = soundClass_or_linkageName;			}			else if (soundClass_or_linkageName is String)			{				var linkageName:String = soundClass_or_linkageName;				var soundClassRef:Class = Class(getDefinitionByName(linkageName));				sound = new soundClassRef();			}			var se:SeSound = new SeSound(sound, soundId, _isMuteBGM, false);						// 登録			_seList[soundId] = se;		}				//--------------------------------------------------------------------------		//　外部音声ファイルをBGMとして登録する		//　※ストリーミング再生します		//　※別ドメインにある音声ファイルを読み込む場合はcheckPolicyFileをtrueにしてください		//--------------------------------------------------------------------------		public static function addExternalBGM(soundId:String, url:String, loop:Boolean = true, bufferTime:Number = 1000, checkPolicyFile:Boolean = false):void		{						// 多重登録を防ぐ			if (_checkConflict_judge(soundId)) {				return;			}						// 定義			var sound:Sound = new Sound(new URLRequest(url), new SoundLoaderContext(bufferTime, checkPolicyFile));			var bgm:BgmSound = new BgmSound(sound, soundId, _isMuteBGM, loop);						// 登録			_bgmList[soundId] = bgm;		}				//--------------------------------------------------------------------------		//　外部音声ファイルをSEとして登録する		//　※ストリーミング再生します		//　別ドメインにある音声ファイルを読み込む場合はcheckPolicyFileをtrueにしてください		//--------------------------------------------------------------------------		public static function addExternalSE(soundId:String, url:String, bufferTime:Number = 1000, checkPolicyFile:Boolean = false):void		{						// 多重登録を防ぐ			if (_checkConflict_judge(soundId)) {				return;			}						// 定義			var sound:Sound = new Sound(new URLRequest(url), new SoundLoaderContext(bufferTime, checkPolicyFile));			var se:SeSound = new SeSound(sound, soundId, _isMuteBGM, false);						// 登録			_seList[soundId] = se;		}				//--------------------------------------------------------------------------		//　BGMをリストから削除する		//--------------------------------------------------------------------------		public static function removeBGM(soundId:String = null):void		{						// 登録中かつ、再生中でなければ消す。でないと参照を失い制御できなくなる			var bgm:BgmSound = _bgmList[soundId];			if (bgm == null) return;						if (bgm.isAvailable && !bgm.isPlaying)				bgm.dispose();		}				//--------------------------------------------------------------------------		//　SEをリストから削除する		//--------------------------------------------------------------------------		public static function removeSE($soundId:String = null):void		{						// 登録中かつ、再生中でなければ消す。でないと参照を失い制御できなくなる			var se:SeSound = _seList[$soundId];			if (se == null) return;			if (se.isAvailable && !se.isPlaying)				se.dispose();		}				//=============================================================		//　■再生・停止・音量制御		//=============================================================				//　再生		//--------------------------------------------------------------------------		public static function play(soundId:String, fadeTime:Number = 0.0, vol:Number = 1):void		{			var sound:BaseSound = _getSound(soundId);			var oldVol:Number = sound.volume;			if (sound is BgmSound)			{				sound.play(volumeBGM, panBGM, 0);				sound.setVolume(oldVol, 0);				sound.setVolume(vol, fadeTime);			}			else			{				sound.play(volumeSE, panSE, fadeTime);			}		}				//　停止		//--------------------------------------------------------------------------		public static function stop(soundId:String):void		{			var sound:BaseSound = _getSound(soundId);			sound.stop();		}				//　音量設定		//--------------------------------------------------------------------------		public static function setVolume(soundId:String, volume:Number, fadeTime:Number = 0.0):void		{			var sound:BaseSound = _getSound(soundId);			sound.setVolume(volume, fadeTime);		}				//　panの操作（-1:左～0:通常～1:右）		//--------------------------------------------------------------------------		public static function setPan(soundId:String, pan:Number, fadeTime:Number = 0.0):void		{			var sound:BaseSound = _getSound(soundId);			sound.setPan(pan, fadeTime);		}				//　全BGMに対してstop()		//--------------------------------------------------------------------------		public static function stopBGM():void		{			var list:Array = bgmList;			for (var key:String in list)			{				_getSound(list[key]).stop();			}		}						//　全BGMに対してstop()		//--------------------------------------------------------------------------		public static function stopBGM_ID(_key:String):void		{			var i:int = 0;			var list:Array = bgmList;			for (i = 0; i < list.length; i++ )			{				if(list[i] === _key) {					_getSound(list[i]).stop();				}			}		}				//　全SEに対してstop()		//--------------------------------------------------------------------------		public static function stopSE():void		{			var list:Array = seList;			for (var key:String in list)			{				_getSound(list[key]).stop();			}		}				public static function stopSE_ID(_key:String):void		{			var i:int = 0;			var list:Array = seList;			for (i = 0; i < list.length; i++ )			{				if(list[i] === _key) {					_getSound(list[i]).stop();					break;				}			}		}				//　全BGMに対して音量設定する		//--------------------------------------------------------------------------		public static function setVolumeBGM(volume:Number, fadeTime:Number = 0.0):void		{			var list:Array = bgmList;			for (var key:String in list)			{				var sound:BaseSound = _getSound(list[key]);				sound.setVolume(volume, fadeTime);			}		}				//　全SEに対して音量設定する		//--------------------------------------------------------------------------		public static function setVolumeSE(volume:Number, fadeTime:Number = 0.0):void		{			var list:Array = seList;			for (var key:String in list)			{				var sound:BaseSound = _getSound(list[key]);				sound.setVolume(volume, fadeTime);			}		}				//　全BGMに対してpan設定する		//--------------------------------------------------------------------------		public static function setPanBGM(pan:Number, fadeTime:Number = 0.0):void		{			var list:Array = bgmList;			for (var key:String in list)			{				var sound:BaseSound = _getSound(list[key]);				sound.setPan(pan, fadeTime);			}		}				//　全SEに対してpan設定する		//--------------------------------------------------------------------------		public static function setPanSE(pan:Number, fadeTime:Number = 0.0):void		{			var list:Array = seList;			for (var key:String in list)			{				var sound:BaseSound = _getSound(list[key]);				sound.setPan(pan, fadeTime);			}		}				//　全BGMに対してミュート		//--------------------------------------------------------------------------		public static function muteBGM(fadeTime:Number = 0.0):void		{			_isMuteBGM = true;			var list:Array = bgmList;			for (var key:String in list)			{				_getSound(list[key]).mute(fadeTime);			}		}				//　全BGMに対してミュート解除		//--------------------------------------------------------------------------		public static function unMuteBGM(fadeTime:Number = 0.0):void		{			_isMuteBGM = false;			var list:Array = bgmList;			for (var key:String in list)			{				_getSound(list[key]).unMute(fadeTime);			}		}				//　全SEに対してミュート		//--------------------------------------------------------------------------		public static function muteSE(fadeTime:Number = 0.0):void		{			_isMuteSE = true;			var list:Array = seList;			for (var key:String in list)			{				_getSound(list[key]).mute(fadeTime);			}		}				//　全SEに対してミュート解除		//--------------------------------------------------------------------------		public static function unMuteSE(fadeTime:Number = 0.0):void		{			_isMuteSE = false;			var list:Array = seList;			for (var key:String in list)			{				_getSound(list[key]).unMute(fadeTime);			}		}				//　全BGMに対してミュート機能を交互に反映		//--------------------------------------------------------------------------		public static function toggleMuteBGM(fadeTime:Number = 0.0):void		{			if (_isMuteBGM)				unMuteBGM(fadeTime);			else				muteBGM(fadeTime);		}				//　全SEに対してミュート機能を交互に反映		//--------------------------------------------------------------------------		public static function toggleMuteSE(fadeTime:Number = 0.0):void		{			if (_isMuteSE)				unMuteSE(fadeTime);			else				muteSE(fadeTime);		}				//　全BGMと全SEの再生状態を直接指定する[true:unMute, false:mute]		//----------------------------------------------------------------------------		public static function setStatus(BGM:Boolean, SE:Boolean, fadeTime:Number = 0.0):void		{			if (BGM)				unMuteBGM(fadeTime);			else				muteBGM(fadeTime);			if (SE)				unMuteSE(fadeTime);			else				muteSE(fadeTime);		}				//=============================================================		//　■その他		//=============================================================				//--------------------------------------------------------------------------		// soundのプロパティをString形式で返す（デバッグ用）		//--------------------------------------------------------------------------		public static function getProperty(soundId:String):String		{						var sound:BaseSound = _getSound(soundId);			var str:String;			var volumeValue:Number = Math.round(sound.volume * 1000) / 1000;			var panValue:Number = Math.round(sound.pan * 1000) / 1000;						str = "[ " + sound.soundId + " ]" + "\n";			str += "-------------------------" + "\n";			str += "　isPlayng : " + String(sound.isPlaying) + "\n"			str += "　isMute 　 : " + String(sound.isMute) + "\n";			str += "　volume   : " + String(volumeValue) + "\n";			str += "　pan　　  　: " + String(panValue) + "\n";						return str;		}				//--------------------------------------------------------------------------		// Boolean形式でそれぞれのプロパティを取得する		//--------------------------------------------------------------------------		public static function isPlaying(soundId:String):Boolean		{			var soundCheck:BaseSound = _getSound(soundId);			var result:Boolean = false;						//鳴らしたことがない音はnullになるためエラーになるので回避			if(soundCheck != null){				result = _getSound(soundId).isPlaying;			}									return result;		}				public static function isMute(soundId:String):Boolean		{			return _getSound(soundId).isMute;		}				public static function isAvailable(soundId:String):Boolean		{			var sound:BaseSound = _getSound(soundId);			if (!sound)				return false;			return sound.isAvailable;		}				//=============================================================		//　■プライベート ヘルパーメソッド		//=============================================================				//--------------------------------------------------------------------------		//　多重登録を防ぐためのチェック		//--------------------------------------------------------------------------		private static function _checkConflict(soundId:String):void		{						// BGM一覧からチェック			for each (var b:BgmSound in _bgmList)			{				if (b.soundId == soundId)				{					//trace( "[Alert] " + soundId + " は既に登録されています。内容を上書きします。" );				}			}						// SE一覧からチェック			for each (var s:SeSound in _seList)			{				if (s.soundId == soundId)				{					//trace( "[Alert] " + soundId + " は既に登録されています。内容を上書きします。" );				}			}		}				private static function _checkConflict_judge(soundId:String):Boolean		{						// BGM一覧からチェック			for each (var b:BgmSound in _bgmList)			{				if (b.soundId == soundId)				{					return true;					//trace( "[Alert] " + soundId + " は既に登録されています。内容を上書きします。" );				}			}						// SE一覧からチェック			for each (var s:SeSound in _seList)			{				if (s.soundId == soundId)				{										return true;					//trace( "[Alert] " + soundId + " は既に登録されています。内容を上書きします。" );				}			}			return false;		}						//--------------------------------------------------------------------------		//　soundの参照を返す		//--------------------------------------------------------------------------		private static function _getSound(soundId:String):BaseSound		{						var sound:BaseSound = null;						// BGM一覧からチェック			for each (var b:BgmSound in _bgmList)			{				if (b.soundId == soundId)					sound = b;			}			// SE一覧からチェック			for each (var s:SeSound in _seList)			{				if (s.soundId == soundId)					sound = s;			}						//if ( ! sound ) 	trace( "[Alert] " + soundId + " は登録されていません。");						return sound;		}		}}