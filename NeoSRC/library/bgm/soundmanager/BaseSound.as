package bgm.soundmanager{	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;			/**************************************************************	 *	 *　BaseSound	 * 	 *************************************************************/	public class BaseSound{				public var soundId:String;		public var type:String;		public var loop:Boolean;		public var isMute:Boolean = false;		public var isPlaying:Boolean = false;		public var isAvailable:Boolean = false;//リストに登録されているかどうか				protected var _sound:Sound;		protected var _channel:SoundChannel;		protected var _tempVolume:Number;						//--------------------------------------------------------------------------		// getter / settter		//--------------------------------------------------------------------------		public function set volume( volume:Number ):void { TweenEngine.tweenVolume(_channel, volume, 0);	}		public function get volume():Number {			if ( ! _channel )		return NaN;			else						return _channel.soundTransform.volume;		}		public function set pan( pan:Number ):void {	_channel.soundTransform.pan = pan;	}		public function get pan():Number {			if ( ! _channel )		return NaN;			else						return _channel.soundTransform.pan;		}						//=========================================================		// コンストラクタ		//=========================================================		public function BaseSound( sound:Sound, soundId:String, isMute:Boolean, loop:Boolean, type:String ) {						// 参照			_sound = sound;			this.isMute = isMute;			this.isAvailable = true;			this.soundId = soundId;			this.loop = loop;			this.type = type;						// 無音再生して強引に初期化			var trans:SoundTransform = new SoundTransform();			trans.volume = 0;			_channel = _sound.play( 1, 0, trans );			if(_channel != null) {				_channel.stop();			} 		}						// 破棄		//--------------------------------------------------------------------------		public function dispose():void {						isAvailable = false;			soundId = null;			_sound = null;			_channel = null;		}						//=========================================================		//  共通メソッド		//=========================================================				// ミュート		//--------------------------------------------------------------------------		public function mute( fadeTime:Number ):void {						isMute = true;			TweenEngine.tweenVolume( _channel, 0, fadeTime );		}						// ミュート解除		//--------------------------------------------------------------------------		public function unMute( fadeTime:Number ):void {						isMute = false;			TweenEngine.tweenVolume( _channel, _tempVolume, fadeTime );		}						// ミュート機能を交互に反映		//--------------------------------------------------------------------------		public function toggleMute( fadeTime:Number ):void {						if ( isMute )	unMute( fadeTime );			else				mute( fadeTime );		}						// 音量設定		//--------------------------------------------------------------------------		public function setVolume( volume:Number, fadeTime:Number ):void {						// 音量制限			if ( volume < 0)			volume = 0;			else if (2 < volume)		volume = 2;						// ミュート解除時のために仮音量を保持する			_tempVolume = volume;						// ミュート中はvolume=0を反映して処理終了			if ( isMute ) {				volume = 0;				return;			}						TweenEngine.tweenVolume( _channel, volume, fadeTime );		}						// パンの操作（-1:左～0:通常～1:右）		//--------------------------------------------------------------------------		public function setPan( pan:Number, fadeTime:Number ):void {						// パン範囲制限			if (pan < -1)			pan = -1;			else if(1 < pan)		pan = 1;						TweenEngine.tweenPan( _channel, pan, fadeTime );		}						//=========================================================		//　BaseSoundを継承するクラス共通のメソッドを定義しておく		//=========================================================		public function play( volume:Number, pan:Number, fadeTime:Number ):void {}		public function stop():void {}									}}